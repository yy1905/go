package publicutils

import (
	"crypto/md5"
	"fmt"
	"math/rand"
	"strings"
	"sync"
	"time"
	"net"
	"os"
)

/*
	startTime := time.Now() //开始时间
	time.Sleep(10 * time.Second)
	endTime := time.Now()  //结束时间
	latencyTime := endTime.Sub(startTime)  //执行时间

*/


// 返回随机n个字符串
func GetRandomString(n int) string {
	str := "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	var r *rand.Rand
	var once = sync.Once{}
	once.Do(func() {
		r = rand.New(rand.NewSource(time.Now().UnixNano()))
	})
	var result string
	for i := 0; i < n; i++ {
		result += string(str[r.Intn(len(str))])
	}
	return result
}

// 获取字符串的md5值
func GetStrMD5(rawMsg string) string {
	data := []byte(rawMsg)
	has := md5.Sum(data)
	md5str1 := fmt.Sprintf("%x", has)
	return strings.ToUpper(md5str1)
}

// 获取随机数[start,end]
var randomMutex sync.Mutex

func GetRandomInt(start, end int) int {
	randomMutex.Lock()
	<-time.After(1 * time.Nanosecond)
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	n := start + r.Intn(end-start+1)
	randomMutex.Unlock()
	return n
}

// 获取当前时间
func GetNowTime() (nowTime string) {
	nowStr := time.Now().Format("2006-01-02 15:04:05")
	return nowStr
}


// 获取ip地址
func GetLocalIp() (ipslice []string) {
	var ipSlice []string

	addrs, err := net.InterfaceAddrs()

	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	for _, address := range addrs {

		// 检查ip地址判断是否回环地址
		if ipnet, ok := address.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				//fmt.Println("ip:", ipnet.IP.String())
				ipSlice = append(ipSlice, ipnet.IP.String())
			}

		}
	}

	return ipSlice
}